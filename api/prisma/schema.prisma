// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  email         String    @unique
  name          String
  role          Role      @default(USER)
  username      String    @unique
  password      String
  profile_photo String?
  cover_photo   String?
  social_link   Json?     @db.Json
  Blog          Blog[]
  Comment       Comment[]
  Like          Like[]
  Package       Package[]
  Review        Review[]
  packageId     String?
  Order         Order[]
}

model Blog {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  title         String
  slug          String    @unique
  content       String
  feature_image String
  isFeatured    Boolean   @default(false)
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String
  tags          String[]
  Comment       Comment[]
  Like          Like[]
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String
}

model Package {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  title         String
  slug          String   @unique
  content       String
  feature_image String
  price         Float
  author        User     @relation(fields: [authorId], references: [id])
  authorId      String
  tags          String[]
  departure     DateTime
  duration      Int
  location      String
  Seat          Int
  aivable_seats Int
  from_place    String?
  isFeatured    Boolean  @default(false)
  Review        Review[]
  Order         Order[]
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  content   String
  rating    Int
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  package   Package  @relation(fields: [packageId], references: [id])
  packageId String
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  package   Package  @relation(fields: [packageId], references: [id])
  packageId String
  status    String   @default("pending")
}

enum Role {
  USER
  ORG
}
